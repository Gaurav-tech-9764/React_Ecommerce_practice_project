{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './ShopTypes';\nexport function* fetchCollectionAsync() {\n  const collectionRef = firestore.collection('collections');\n  dispatch(FetchCollectionStart()); //Dispatch the Start Function as event is start\n\n  collectionRef.get().then(snapShot => {\n    const CollectionMap = ConverCollectionsSnapshotMap(snapShot);\n    dispatch(FetchCollectionSuccess(CollectionMap));\n  }).catch(error => dispatch(FetchCollectionFailure(error.message)) //dispatch failuer\n  );\n}\nexport function* fetchCollectionStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["/home/neosoft/React_training/React_practice/clothing-ecommerce/src/redux/Shop-redux/ShopSagas.js"],"names":["takeEvery","ShopActionTypes","fetchCollectionAsync","collectionRef","firestore","collection","dispatch","FetchCollectionStart","get","then","snapShot","CollectionMap","ConverCollectionsSnapshotMap","FetchCollectionSuccess","catch","error","FetchCollectionFailure","message","fetchCollectionStart","FETCH_COLLECTION_START"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AAEA,OAAOC,eAAP,MAA4B,aAA5B;AAGA,OAAO,UAAUC,oBAAV,GAAgC;AAEnC,QAAMC,aAAa,GAAEC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAArB;AAEAC,EAAAA,QAAQ,CAACC,oBAAoB,EAArB,CAAR,CAJmC,CAIA;;AAEnCJ,EAAAA,aAAa,CAACK,GAAd,GAAoBC,IAApB,CAA0BC,QAAQ,IAAI;AAClC,UAAMC,aAAa,GAACC,4BAA4B,CAACF,QAAD,CAAhD;AACAJ,IAAAA,QAAQ,CAACO,sBAAsB,CAACF,aAAD,CAAvB,CAAR;AACF,GAHF,EAGIG,KAHJ,CAGUC,KAAK,IAAET,QAAQ,CAACU,sBAAsB,CAACD,KAAK,CAACE,OAAP,CAAvB,CAHzB,CAGiE;AAHjE;AAKH;AAED,OAAO,UAAUC,oBAAV,GAAgC;AAClC,QAAMlB,SAAS,CAACC,eAAe,CAACkB,sBAAjB,EAAyCjB,oBAAzC,CAAf;AACJ","sourcesContent":["import {takeEvery} from 'redux-saga/effects'\n\nimport ShopActionTypes from './ShopTypes'\n\n\nexport function* fetchCollectionAsync(){\n\n    const collectionRef =firestore.collection('collections');\n\n    dispatch(FetchCollectionStart());  //Dispatch the Start Function as event is start\n\n    collectionRef.get().then( snapShot => {\n        const CollectionMap=ConverCollectionsSnapshotMap(snapShot)\n        dispatch(FetchCollectionSuccess(CollectionMap));\n     }).catch(error=>dispatch(FetchCollectionFailure(error.message)) //dispatch failuer\n     )\n}\n\nexport function* fetchCollectionStart(){\n     yield takeEvery(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync )\n}"]},"metadata":{},"sourceType":"module"}