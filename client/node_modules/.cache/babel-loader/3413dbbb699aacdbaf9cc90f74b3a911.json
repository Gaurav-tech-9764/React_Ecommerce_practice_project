{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport 'firebase/firestore';\nimport 'firebase/compat/firestore';\nimport { GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyACf_prwK5btWgMqK6ZUXZLn7LvFXc1HTU\",\n  authDomain: \"my-react-project-gaurav.firebaseapp.com\",\n  projectId: \"my-react-project-gaurav\",\n  storageBucket: \"my-react-project-gaurav.appspot.com\",\n  messagingSenderId: \"98837160630\",\n  appId: \"1:98837160630:web:0066a44cb97be683977c17\",\n  measurementId: \"G-KL9J9CG40J\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`Users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      alert(\"Error in Creating User\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const AddCollectionAndDocuments = async (collectionKey, ObjectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  ObjectToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\n_c = AddCollectionAndDocuments;\nexport const ConverCollectionsSnapshotMap = collections => {\n  const transFormedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transFormedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n_c2 = ConverCollectionsSnapshotMap;\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubcribe = onAuthStateChanged(auth, userAuth => {\n      unsubcribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nfirebase.initializeApp(config);\nexport const auth = getAuth();\nexport const firestore = firebase.firestore();\nexport const GoogleProvider = new GoogleAuthProvider();\nGoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => signInWithPopup(auth, GoogleProvider).then(result => {\n  // This gives you a Google Access Token. You can use it to access the Google API.\n  const credential = GoogleAuthProvider.credentialFromResult(result);\n  const token = credential.accessToken; // The signed-in user info.\n\n  const user = result.user; // ...\n}).catch(error => {\n  // Handle Errors here.\n  const errorCode = error.code;\n  const errorMessage = error.message; // The email of the user's account used.\n\n  const email = error.email; // The AuthCredential type that was used.\n\n  const credential = GoogleAuthProvider.credentialFromError(error); // ...\n});\nexport default firebase;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddCollectionAndDocuments\");\n$RefreshReg$(_c2, \"ConverCollectionsSnapshotMap\");","map":{"version":3,"sources":["/home/neosoft/React_training/React_practice/clothing-ecommerce/src/FireBase/Firebase-util.js"],"names":["firebase","getAuth","onAuthStateChanged","GoogleAuthProvider","signInWithPopup","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","alert","message","AddCollectionAndDocuments","collectionKey","ObjectToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","ConverCollectionsSnapshotMap","collections","transFormedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubcribe","auth","initializeApp","GoogleProvider","setCustomParameters","prompt","signInWithGoogle","then","result","credential","credentialFromResult","token","accessToken","user","catch","errorCode","code","errorMessage","credentialFromError"],"mappings":"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","sourcesContent":["import firebase from 'firebase/compat/app';\nimport { getAuth,onAuthStateChanged } from \"firebase/auth\";\nimport 'firebase/firestore' \nimport 'firebase/compat/firestore';\nimport { GoogleAuthProvider , signInWithPopup} from \"firebase/auth\";\n\nconst config = {\n    apiKey: \"AIzaSyACf_prwK5btWgMqK6ZUXZLn7LvFXc1HTU\",\n    authDomain: \"my-react-project-gaurav.firebaseapp.com\",\n    projectId: \"my-react-project-gaurav\",\n    storageBucket: \"my-react-project-gaurav.appspot.com\",\n    messagingSenderId: \"98837160630\",\n    appId: \"1:98837160630:web:0066a44cb97be683977c17\",\n    measurementId: \"G-KL9J9CG40J\"\n  };\n\n\n  export const createUserProfileDocument = async (userAuth, additionalData) => \n  {\n\n        if(!userAuth) return;\n\n        const userRef = firestore.doc(`Users/${userAuth.uid}`);\n        const snapShot = await userRef.get();\n\n        if(!snapShot.exists){\n\n          const { displayName, email} = userAuth;\n          \n          const createdAt = new Date();\n\n          try{\n            await userRef.set({\n              displayName,\n              email,\n              createdAt,\n              ...additionalData\n            })\n          }\n          catch(error){\n            alert(\"Error in Creating User\",error.message)\n         \n\n          }\n\n        }\n        return userRef\n\n  };\n\n\n  export const AddCollectionAndDocuments =  async (\n    collectionKey,\n    ObjectToAdd\n  )=> {\n    const collectionRef = firestore.collection(collectionKey)\n    const batch = firestore.batch();\n    ObjectToAdd.forEach(obj => {\n      const newDocRef = collectionRef.doc();\n      batch.set(newDocRef,obj);\n      \n    });\n   return await batch.commit()\n\n  } \n\n export  const ConverCollectionsSnapshotMap = (collections) => {\n\n    const transFormedCollection = collections.docs.map(doc=>{\n      const{title, items} = doc.data();\n\n      return{\n        routeName: encodeURI(title.toLowerCase()),\n        id:doc.id,\n        title,\n        items\n      }\n    });\n\n return transFormedCollection.reduce((accumulator, collection)=>{\n\n  accumulator[collection.title.toLowerCase()]=collection;\n  return accumulator\n },{})\n     \n  }\n\n\n\nexport const getCurrentUser= () => {\n  return new Promise((resolve, reject)=> {\n    const unsubcribe = onAuthStateChanged(auth,  userAuth=>{\n      unsubcribe();\n      resolve(userAuth)\n    },reject)\n  })\n}\n\n  firebase.initializeApp(config);\n\n  export const auth = getAuth();\n  export const firestore = firebase.firestore();\n\n  export const  GoogleProvider = new GoogleAuthProvider();\n\n  GoogleProvider.setCustomParameters({prompt: 'select_account'})\n\n  \n  export const signInWithGoogle = () => signInWithPopup(auth, GoogleProvider)\n  .then((result) => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    // The signed-in user info.\n    const user = result.user;\n    // ...\n  }).catch((error) => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.email;\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    // ...\n  });\n\n  export default firebase;"]},"metadata":{},"sourceType":"module"}