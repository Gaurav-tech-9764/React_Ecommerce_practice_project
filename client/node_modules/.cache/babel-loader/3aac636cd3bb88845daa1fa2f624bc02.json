{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport { getAuth } from \"firebase/auth\";\nimport 'firebase/compat/firestore';\nimport { GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyACf_prwK5btWgMqK6ZUXZLn7LvFXc1HTU\",\n  authDomain: \"my-react-project-gaurav.firebaseapp.com\",\n  projectId: \"my-react-project-gaurav\",\n  storageBucket: \"my-react-project-gaurav.appspot.com\",\n  messagingSenderId: \"98837160630\",\n  appId: \"1:98837160630:web:0066a44cb97be683977c17\",\n  measurementId: \"G-KL9J9CG40J\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`Users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"Error in Creating User\", error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = getAuth();\nexport const firestore = firebase.firestore();\nconst provider = new GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => signInWithPopup(auth, provider).then(result => {\n  // This gives you a Google Access Token. You can use it to access the Google API.\n  const credential = GoogleAuthProvider.credentialFromResult(result);\n  const token = credential.accessToken; // The signed-in user info.\n\n  const user = result.user; // ...\n}).catch(error => {\n  // Handle Errors here.\n  const errorCode = error.code;\n  const errorMessage = error.message; // The email of the user's account used.\n\n  const email = error.email; // The AuthCredential type that was used.\n\n  const credential = GoogleAuthProvider.credentialFromError(error); // ...\n});\nexport default firebase;","map":{"version":3,"sources":["/home/neosoft/React_training/React_practice/clothing-ecommerce/src/FireBase/Firebase-util.js"],"names":["firebase","getAuth","GoogleAuthProvider","signInWithPopup","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","auth","provider","setCustomParameters","prompt","signInWithGoogle","then","result","credential","credentialFromResult","token","accessToken","user","catch","errorCode","code","errorMessage","credentialFromError"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,OAAO,2BAAP;AACA,SAASC,kBAAT,EAA8BC,eAA9B,QAAoD,eAApD;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,yCAFD;AAGXC,EAAAA,SAAS,EAAE,yBAHA;AAIXC,EAAAA,aAAa,EAAE,qCAJJ;AAKXC,EAAAA,iBAAiB,EAAE,aALR;AAMXC,EAAAA,KAAK,EAAE,0CANI;AAOXC,EAAAA,aAAa,EAAE;AAPJ,CAAf;AAWE,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KACzC;AAEM,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAoB;AAElB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAwBV,QAA9B;AAEA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAG;AACD,YAAMV,OAAO,CAACW,GAAR,CAAY;AAEhBJ,QAAAA,WAFgB;AAGhBC,QAAAA,KAHgB;AAIhBC,QAAAA,SAJgB;AAKhB,WAAGV;AALa,OAAZ,CAAN;AAOD,KARD,CASA,OAAMa,KAAN,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAqCF,KAAK,CAACG,OAA3C;AAED;AAEF;;AACD,SAAOf,OAAP;AAEL,CA/BM;AAiCPf,QAAQ,CAAC+B,aAAT,CAAuB3B,MAAvB;AAEA,OAAO,MAAM4B,IAAI,GAAG/B,OAAO,EAApB;AACP,OAAO,MAAMe,SAAS,GAAGhB,QAAQ,CAACgB,SAAT,EAAlB;AAEP,MAAMiB,QAAQ,GAAG,IAAI/B,kBAAJ,EAAjB;AAEA+B,QAAQ,CAACC,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAE;AAAT,CAA7B;AAGA,OAAO,MAAMC,gBAAgB,GAAG,MAAMjC,eAAe,CAAC6B,IAAD,EAAOC,QAAP,CAAf,CACrCI,IADqC,CAC/BC,MAAD,IAAY;AAChB;AACA,QAAMC,UAAU,GAAGrC,kBAAkB,CAACsC,oBAAnB,CAAwCF,MAAxC,CAAnB;AACA,QAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB,CAHgB,CAIhB;;AACA,QAAMC,IAAI,GAAGL,MAAM,CAACK,IAApB,CALgB,CAMhB;AACD,CARqC,EAQnCC,KARmC,CAQ5BjB,KAAD,IAAW;AAClB;AACA,QAAMkB,SAAS,GAAGlB,KAAK,CAACmB,IAAxB;AACA,QAAMC,YAAY,GAAGpB,KAAK,CAACG,OAA3B,CAHkB,CAIlB;;AACA,QAAMP,KAAK,GAAGI,KAAK,CAACJ,KAApB,CALkB,CAMlB;;AACA,QAAMgB,UAAU,GAAGrC,kBAAkB,CAAC8C,mBAAnB,CAAuCrB,KAAvC,CAAnB,CAPkB,CAQlB;AACD,CAjBqC,CAA/B;AAmBP,eAAe3B,QAAf","sourcesContent":["import firebase from 'firebase/compat/app';\nimport { getAuth } from \"firebase/auth\";\nimport 'firebase/compat/firestore';\nimport { GoogleAuthProvider , signInWithPopup} from \"firebase/auth\";\n\nconst config = {\n    apiKey: \"AIzaSyACf_prwK5btWgMqK6ZUXZLn7LvFXc1HTU\",\n    authDomain: \"my-react-project-gaurav.firebaseapp.com\",\n    projectId: \"my-react-project-gaurav\",\n    storageBucket: \"my-react-project-gaurav.appspot.com\",\n    messagingSenderId: \"98837160630\",\n    appId: \"1:98837160630:web:0066a44cb97be683977c17\",\n    measurementId: \"G-KL9J9CG40J\"\n  };\n\n\n  export const createUserProfileDocument = async (userAuth, additionalData) => \n  {\n\n        if(!userAuth) return;\n\n        const userRef = firestore.doc(`Users/${userAuth.uid}`);\n        const snapShot = await userRef.get();\n\n        if(!snapShot.exists){\n\n          const { displayName, email} = userAuth;\n          \n          const createdAt = new Date();\n\n          try{\n            await userRef.set({\n\n              displayName,\n              email,\n              createdAt,\n              ...additionalData\n            })\n          }\n          catch(error){\n            console.log(\"Error in Creating User\",error.message)\n\n          }\n\n        }\n        return userRef\n\n  };\n\n  firebase.initializeApp(config);\n\n  export const auth = getAuth();\n  export const firestore = firebase.firestore();\n\n  const provider = new GoogleAuthProvider();\n\n  provider.setCustomParameters({prompt: 'select_account'})\n\n  \n  export const signInWithGoogle = () => signInWithPopup(auth, provider)\n  .then((result) => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credential.accessToken;\n    // The signed-in user info.\n    const user = result.user;\n    // ...\n  }).catch((error) => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.email;\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    // ...\n  });\n\n  export default firebase;"]},"metadata":{},"sourceType":"module"}