{"ast":null,"code":"import { takeLatest, put, all, call } from \"@redux-saga/core/effects\";\nimport UserActionTypes from \"./UserTypes\";\nimport { signInWithPopup, signOut } from \"firebase/auth\";\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { GoogleProvider, auth, createUserProfileDocument, getCurrentUser } from \"../../FireBase/Firebase-util\";\nimport { SignInFailure, SignInSuccess, SignOutFailure, SignOutSuccess, SignUpFailure, SignUpSuccess } from \"./UserAction\";\nexport function* getSnapShotForUser(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* SignInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield signInWithPopup(auth, GoogleProvider);\n    yield getSnapShotForUser(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n_c = SignInWithGoogle;\nexport function* SignInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield signInWithEmailAndPassword(auth, email, password);\n    yield getSnapShotForUser(user);\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\n_c2 = SignInWithEmail;\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotForUser(userAuth);\n  } catch (error) {}\n}\nexport function* SignOut() {\n  try {\n    yield signOut(auth);\n    yield put(SignOutSuccess());\n  } catch (error) {\n    yield put(SignOutFailure(error));\n  }\n}\n_c3 = SignOut;\nexport function* SignUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield createUserWithEmailAndPassword(auth, email, password);\n    yield put(SignUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(SignUpFailure(error));\n  }\n}\n_c4 = SignUp;\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, SignInWithGoogle);\n}\nexport function* onEmailSignInstart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, SignInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, SignOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, SignUp);\n}\nexport function* UserSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInstart), call(onCheckUserSession), call(onSignOutStart)]);\n}\n_c5 = UserSagas;\n\ntry {\n  const {\n    user\n  } = await createUserWithEmailAndPassword(auth, email, password);\n  await createUserProfileDocument(user, {\n    displayName\n  });\n  this.setState({\n    displayName: '',\n    email: '',\n    password: '',\n    ConfirmPassword: ''\n  });\n} catch (error) {\n  console.error(error);\n}\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"SignInWithGoogle\");\n$RefreshReg$(_c2, \"SignInWithEmail\");\n$RefreshReg$(_c3, \"SignOut\");\n$RefreshReg$(_c4, \"SignUp\");\n$RefreshReg$(_c5, \"UserSagas\");","map":{"version":3,"sources":["/home/neosoft/React_training/React_practice/clothing-ecommerce/src/redux/User/UserSagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","signInWithPopup","signOut","signInWithEmailAndPassword","createUserWithEmailAndPassword","GoogleProvider","auth","createUserProfileDocument","getCurrentUser","SignInFailure","SignInSuccess","SignOutFailure","SignOutSuccess","SignUpFailure","SignUpSuccess","getSnapShotForUser","userAuth","userRef","userSnapshot","get","id","data","error","SignInWithGoogle","user","SignInWithEmail","payload","email","password","isUserAuthenticated","SignOut","SignUp","displayName","additionalData","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInstart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","UserSagas","setState","ConfirmPassword","console"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call} from \"@redux-saga/core/effects\";\nimport UserActionTypes from \"./UserTypes\";\nimport {signInWithPopup, signOut } from \"firebase/auth\";\nimport {signInWithEmailAndPassword , createUserWithEmailAndPassword} from \"firebase/auth\"\n\nimport { GoogleProvider, auth, createUserProfileDocument,getCurrentUser } from \"../../FireBase/Firebase-util\";\nimport { SignInFailure, SignInSuccess, SignOutFailure, SignOutSuccess, SignUpFailure, SignUpSuccess } from \"./UserAction\";\n\nexport function* getSnapShotForUser(userAuth){\n    try{\n        const userRef = yield call(createUserProfileDocument, userAuth);\n        const userSnapshot = yield userRef.get();\n        yield put(\n                     SignInSuccess({id:userSnapshot.id, ...userSnapshot.data()})\n                 )\n        }\n    catch(error){\n                yield put(\n                             SignInFailure(error)\n                         )\n                }\n    }\n\nexport function* SignInWithGoogle(){\n    try{\n        \n        const {user} = yield signInWithPopup(auth, GoogleProvider);\n             yield getSnapShotForUser(user)\n\n        }\n    catch(error){\n             yield put(\n                        SignInFailure(error)\n                      )\n                }\n    }\n\nexport function* SignInWithEmail({payload: {email , password}}){\n    try{\n        const {user} = yield signInWithEmailAndPassword( auth, email,password)\n            yield getSnapShotForUser(user)\n\n    }\n    catch(error){\n                yield put(SignInFailure(error))\n            }\n    }\n\nexport function* isUserAuthenticated(){\n\n    try{\n        const userAuth = yield getCurrentUser();\n    if(!userAuth) \n    return;\n    yield getSnapShotForUser(userAuth)\n\n    }catch(error){\n\n    }\n\n}\n\nexport function* SignOut(){\n    try{\n        yield signOut(auth)\n        yield put(SignOutSuccess())\n\n    }catch(error){\n        yield put (SignOutFailure(error))\n    }\n}\n\nexport function* SignUp({payload:{email, password, displayName}}){\ntry{\n    const {user} = yield createUserWithEmailAndPassword(auth,\n        \n        email,\n        password\n    );\n\n    yield put(SignUpSuccess({user,additionalData:{displayName}}))\n}\ncatch(error){\n yield put(SignUpFailure(error))\n\n}  \n\n\n}\n\n\nexport function* onGoogleSignInStart(){\n\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, SignInWithGoogle)\n\n}\n\nexport function* onEmailSignInstart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, SignInWithEmail )\n}\n\nexport function* onCheckUserSession(){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\n\nexport function* onSignOutStart(){\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, SignOut)\n}\n\n\nexport function* onSignUpStart(){\n    yield takeLatest(UserActionTypes.SIGN_UP_START, SignUp)\n}\n\nexport function* UserSagas(){\n    yield all([call(onGoogleSignInStart), call(onEmailSignInstart), call(onCheckUserSession), call(onSignOutStart)])\n}\n\ntry{\n    const {user} = await createUserWithEmailAndPassword(auth,\n        \n        email,\n        password\n    );\n    \n   await createUserProfileDocument(user, {displayName});\n    this.setState({\n        displayName:'',\n        email:'',\n        password:'',\n        ConfirmPassword:''\n    });\n\n }\n    catch(error){\n        console.error(error);\n\n    }     "]},"metadata":{},"sourceType":"module"}